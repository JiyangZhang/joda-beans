/*
 *  Copyright 2001-2012 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.beans.gen;

import java.util.Map;

import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.TestValidateBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Mock used for test equals.
 * 
 * @author Stephen Colebourne
 */
@BeanDefinition
public class ValidateBean extends DirectBean {

    /**
     * The non-null value.
     */
    @PropertyDefinition(validate = "notNull")
    private String first;
    /**
     * The non-empty value.
     */
    @PropertyDefinition(validate = "notEmpty")
    private String second;
    /**
     * The static checked value.
     */
    @PropertyDefinition(validate = "TestValidateBean.checkInTest")
    private String third;
    /**
     * The locally checked value.
     */
    @PropertyDefinition(validate = "checkInBean")
    private String fourth;

    public ValidateBean() {
    }

    private static void checkInBean(String value, String propertyName) {
        if ("D".equals(value) == false) {
            throw new IllegalArgumentException(propertyName);
        }
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ValidateBean}.
     * @return the meta-bean, not null
     */
    public static ValidateBean.Meta meta() {
        return ValidateBean.Meta.INSTANCE;
    }
    static {
        JodaBeanUtils.registerMetaBean(ValidateBean.Meta.INSTANCE);
    }

    @Override
    public ValidateBean.Meta metaBean() {
        return ValidateBean.Meta.INSTANCE;
    }

    @Override
    protected Object propertyGet(String propertyName, boolean quiet) {
        switch (propertyName.hashCode()) {
            case 97440432:  // first
                return getFirst();
            case -906279820:  // second
                return getSecond();
            case 110331239:  // third
                return getThird();
            case -1268684262:  // fourth
                return getFourth();
        }
        return super.propertyGet(propertyName, quiet);
    }

    @Override
    protected void propertySet(String propertyName, Object newValue, boolean quiet) {
        switch (propertyName.hashCode()) {
            case 97440432:  // first
                setFirst((String) newValue);
                return;
            case -906279820:  // second
                setSecond((String) newValue);
                return;
            case 110331239:  // third
                setThird((String) newValue);
                return;
            case -1268684262:  // fourth
                setFourth((String) newValue);
                return;
        }
        super.propertySet(propertyName, newValue, quiet);
    }

    @Override
    protected void validate() {
        JodaBeanUtils.notNull(first, "first");
        JodaBeanUtils.notEmpty(second, "second");
        TestValidateBean.checkInTest(third, "third");
        checkInBean(fourth, "fourth");
        super.validate();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ValidateBean other = (ValidateBean) obj;
            return JodaBeanUtils.equal(getFirst(), other.getFirst()) &&
                    JodaBeanUtils.equal(getSecond(), other.getSecond()) &&
                    JodaBeanUtils.equal(getThird(), other.getThird()) &&
                    JodaBeanUtils.equal(getFourth(), other.getFourth());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash += hash * 31 + JodaBeanUtils.hashCode(getFirst());
        hash += hash * 31 + JodaBeanUtils.hashCode(getSecond());
        hash += hash * 31 + JodaBeanUtils.hashCode(getThird());
        hash += hash * 31 + JodaBeanUtils.hashCode(getFourth());
        return hash;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the non-null value.
     * @return the value of the property, not null
     */
    public String getFirst() {
        return first;
    }

    /**
     * Sets the non-null value.
     * @param first  the new value of the property, not null
     */
    public void setFirst(String first) {
        JodaBeanUtils.notNull(first, "first");
        this.first = first;
    }

    /**
     * Gets the the {@code first} property.
     * @return the property, not null
     */
    public final Property<String> first() {
        return metaBean().first().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the non-empty value.
     * @return the value of the property, not null
     */
    public String getSecond() {
        return second;
    }

    /**
     * Sets the non-empty value.
     * @param second  the new value of the property, not null
     */
    public void setSecond(String second) {
        JodaBeanUtils.notEmpty(second, "second");
        this.second = second;
    }

    /**
     * Gets the the {@code second} property.
     * @return the property, not null
     */
    public final Property<String> second() {
        return metaBean().second().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the static checked value.
     * @return the value of the property
     */
    public String getThird() {
        return third;
    }

    /**
     * Sets the static checked value.
     * @param third  the new value of the property
     */
    public void setThird(String third) {
        TestValidateBean.checkInTest(third, "third");
        this.third = third;
    }

    /**
     * Gets the the {@code third} property.
     * @return the property, not null
     */
    public final Property<String> third() {
        return metaBean().third().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the locally checked value.
     * @return the value of the property
     */
    public String getFourth() {
        return fourth;
    }

    /**
     * Sets the locally checked value.
     * @param fourth  the new value of the property
     */
    public void setFourth(String fourth) {
        checkInBean(fourth, "fourth");
        this.fourth = fourth;
    }

    /**
     * Gets the the {@code fourth} property.
     * @return the property, not null
     */
    public final Property<String> fourth() {
        return metaBean().fourth().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ValidateBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code first} property.
         */
        private final MetaProperty<String> first = DirectMetaProperty.ofReadWrite(
                this, "first", ValidateBean.class, String.class);
        /**
         * The meta-property for the {@code second} property.
         */
        private final MetaProperty<String> second = DirectMetaProperty.ofReadWrite(
                this, "second", ValidateBean.class, String.class);
        /**
         * The meta-property for the {@code third} property.
         */
        private final MetaProperty<String> third = DirectMetaProperty.ofReadWrite(
                this, "third", ValidateBean.class, String.class);
        /**
         * The meta-property for the {@code fourth} property.
         */
        private final MetaProperty<String> fourth = DirectMetaProperty.ofReadWrite(
                this, "fourth", ValidateBean.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "first",
                "second",
                "third",
                "fourth");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 97440432:  // first
                    return first;
                case -906279820:  // second
                    return second;
                case 110331239:  // third
                    return third;
                case -1268684262:  // fourth
                    return fourth;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ValidateBean> builder() {
            return new DirectBeanBuilder<ValidateBean>(new ValidateBean());
        }

        @Override
        public Class<? extends ValidateBean> beanType() {
            return ValidateBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code first} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> first() {
            return first;
        }

        /**
         * The meta-property for the {@code second} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> second() {
            return second;
        }

        /**
         * The meta-property for the {@code third} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> third() {
            return third;
        }

        /**
         * The meta-property for the {@code fourth} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> fourth() {
            return fourth;
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
